double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
library(pomp)
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
library(pomp)
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
library(pomp)
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
rm(list = ls())
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
rm(list = ls())
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","rho","k")
) -> measSEIR
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
double length;
length = 1;
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
length(c(1,2,3))
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
double mean;
mean = rho*H;
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
library(pomp)
readr::read_csv("https://kingaa.github.io/sbied/stochsim/Measles_Consett_1948.csv") |>
dplyr::select(week,reports=cases) -> meas
# step function: E is similar to the component I, add E in the chain
seir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
# initial function: suppose we do not no the latent value of E at first.
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 0;
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
# dmeasure component
seir_dmeas <- Csnippet("
lik = dnbinom_mu(reports,k,rho*H,give_log);
")
# rmeasure component
seir_rmeas <- Csnippet("
double mean, sd;
double length;
mean = rho*H;
sd = H;
length = rnorm(1,mean,sd);
reports = rnbinom_mu(k,rho*H);
")
# add components to pomp model: clarify E and mu_EI
meas |>
pomp(times="week",t0=0,
rprocess=euler(seir_step,delta.t=1/7),
rinit=seir_rinit,
rmeasure=seir_rmeas,
dmeasure=seir_dmeas,
accumvars="H",
statenames=c("S","E","I","R","H"),
paramnames=c("Beta","mu_EI","mu_IR","N","eta","rho","k")
) -> measSEIR
es <- c(-2446, -2444, -2443, -2442, -2440)
library(pomp)
logmeanexp(es, se = TRUE)
Q9 <- readRDS("~/Library/Mobile Documents/com~apple~CloudDocs/531/Stats531/hw08/Q9.rds")
logmeanexp(Q9, se = TRUE)
Q9 <- readRDS("~/Library/Mobile Documents/com~apple~CloudDocs/531/Stats531/hw08/Q9.rds")
logmeanexp(Q9)
